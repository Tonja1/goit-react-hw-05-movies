{"version":3,"file":"static/js/293.48a12daa.chunk.js","mappings":"4RAEaA,EAAWC,EAAAA,GAAAA,GAAH,4KAMRC,EAAUD,EAAAA,GAAAA,IAAH,sFAMPE,EAAYF,EAAAA,GAAAA,EAAH,mIAQTG,EAAgBH,EAAAA,GAAAA,EAAH,gH,SCXbI,EAAW,SAAC,GACrB,OADuC,EAAhBC,UACNC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,aAA7B,OACjB,UAACX,EAAD,YACI,SAACE,EAAD,CACIU,IAAKD,EAAY,UAAME,EAAAA,IAAN,OAAkBF,GAAlB,UAAsCG,GACvDC,IAAI,aAER,SAACZ,EAAD,UAAYK,KACZ,UAACJ,EAAD,yBAA2BK,OANhBC,EADE,GAUxB,ECpBYM,EAAOf,EAAAA,GAAAA,GAAH,gGAOJgB,EAAUhB,EAAAA,GAAAA,EAAH,4C,oBCqCpB,EArCa,WACT,OAAkCiB,EAAAA,EAAAA,UAAS,IAA3C,eAAOZ,EAAP,KAAkBa,EAAlB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACNH,GAAW,GACX,IAAMI,EAAO,mCAAG,8GAEeC,EAAAA,EAAAA,IAAUJ,GAFzB,OAEFK,EAFE,OAGRV,EAAaU,EAASC,KAAKC,MAHnB,gDAKRV,EAAS,KAAMW,SALP,yBAORT,GAAW,GAPH,4EAAH,qDAUbI,GACH,GAAE,CAACH,KAGA,gCACKJ,IAAS,uBAAIA,EAAMY,UACnBV,IAAW,SAACW,EAAA,EAAD,IACU,IAArB3B,EAAU4B,QACP,SAAClB,EAAD,WACI,SAACX,EAAD,CAAUC,UAAWA,OAGzB,SAACW,EAAD,2DAIf,C,2NC1CKkB,EAAO,mCACPC,EAAW,gCACJvB,EAAY,kCAEZwB,EAAa,mCAAG,8FACdC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,oCAAiDD,IADnC,mFAAH,qDAIbI,EAAgB,mCAAG,WAAMC,GAAN,iFACjBF,EAAAA,EAAAA,IAAA,UACRF,EADQ,iBACSI,EADT,oBAC6BL,EAD7B,oBADiB,mFAAH,sDAMhBM,EAAgB,mCAAG,WAAMC,GAAN,iFACjBJ,EAAAA,EAAAA,IAAA,UACRF,EADQ,gCACwBD,EADxB,4DACmFO,IAFlE,mFAAH,sDAMhBd,EAAS,mCAAG,WAAMY,GAAN,iFACVF,EAAAA,EAAAA,IAAA,UACRF,EADQ,iBACSI,EADT,4BACqCL,EADrC,oBADU,mFAAH,sDAMTQ,EAAY,mCAAG,WAAMH,GAAN,iFACbF,EAAAA,EAAAA,IAAA,UACRF,EADQ,iBACSI,EADT,4BACqCL,EADrC,oBADa,mFAAH,qD","sources":["components/CastList/CastListStyled.js","components/CastList/CastList.jsx","Pages/Cast/CastStyled.js","Pages/Cast/Cast.jsx","components/FetchData.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastItem = styled.li`\n  width: 200px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const CastImg = styled.img`\n  width: 100%;\n  min-height: 300px;\n  margin-bottom: 10px;\n`;\n\nexport const ActorName = styled.p`\n  font-size: 20px;\n  font-weight: 800;\n  margin-bottom: 10px;\n  color: #483d8b;\n  padding-left: 10px;\n`;\n\nexport const CharacterName = styled.p`\n  font-size: 20px;\n  font-weight: 600;\n  margin-bottom: 10px;\n  padding-left: 10px;\n`;","import PropTypes from 'prop-types';\nimport noImage from '../Images/noImage.jpg';\nimport { IMAGE_URL } from 'components/FetchData';\n\nimport {\n    CastItem,\n    CastImg,\n    ActorName,\n    CharacterName,\n} from './CastListStyled';\n\nexport const CastList = ({ castItems }) => {\n    return castItems.map(({ name, character, cast_id, profile_path }) => (\n        <CastItem key={cast_id}>\n            <CastImg\n                src={profile_path ? `${IMAGE_URL}${profile_path}` : `${noImage}`}\n                alt='profile'\n            />\n            <ActorName>{name}</ActorName>\n            <CharacterName>Character: {character}</CharacterName>\n        </CastItem>\n    ));\n};\n\nCastList.propTypes = {\n  castItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      character: PropTypes.string,\n      cast_id: PropTypes.number,\n      profile_path: PropTypes.string,\n    })\n  ).isRequired,\n};","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n  font-size: 20px;\n  display: flex;\n  gap: 50px;\n  flex-wrap: wrap;\n`;\n\nexport const Message = styled.p`\n  font-size: 25px;\n`;","import { FetchCast } from \"components/FetchData\";\nimport { Spinner } from \"components/Spinner\";\nimport { CastList } from \"components/CastList/CastList\";\n\nimport { List, Message } from \"./CastStyled\";\n\nimport { useState,useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst Cast = () => {\n    const [castItems, setCastItems] = useState([]);\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        setLoading(true);\n        const getCast = async () => {\n            try {\n                const castData = await FetchCast(movieId);\n                setCastItems(castData.data.cast);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n        getCast();\n    }, [movieId]);\n\n    return (\n        <>\n            {error && <p>{error.message}</p>}\n            {loading && <Spinner />}\n            {castItems.length !== 0 ? (\n                <List>\n                    <CastList castItems={castItems} />\n                </List>\n            ) : (\n                <Message>We don't have any information about actors</Message>\n            )}\n        </>\n    );\n};\n\nexport default Cast;","import axios from \"axios\";\n\nconst API_KEY = `4ae6168b46e9ef37c5631010b26d05b2`;\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const FetchTrending = async () => {\n  return await axios.get(`${BASE_URL}trending/all/day?api_key=${API_KEY}`);\n};\n\nexport const FetchSingleMovie = async movie_id => {\n  return await axios.get(\n    `${BASE_URL}movie/${movie_id}?api_key=${API_KEY}&language=en-US`\n  );\n};\n\nexport const FetchSearchMovie = async search => {\n  return await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${search}`\n  );\n};\n\nexport const FetchCast = async movie_id => {\n  return await axios.get(\n    `${BASE_URL}movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n};\n\nexport const FetchReviews = async movie_id => {\n  return await axios.get(\n    `${BASE_URL}movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n};"],"names":["CastItem","styled","CastImg","ActorName","CharacterName","CastList","castItems","map","name","character","cast_id","profile_path","src","IMAGE_URL","noImage","alt","List","Message","useState","setCastItems","error","setError","loading","setLoading","movieId","useParams","useEffect","getCast","FetchCast","castData","data","cast","message","Spinner","length","API_KEY","BASE_URL","FetchTrending","axios","FetchSingleMovie","movie_id","FetchSearchMovie","search","FetchReviews"],"sourceRoot":""}